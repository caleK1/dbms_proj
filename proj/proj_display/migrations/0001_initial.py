# Generated by Django 5.1.1 on 2024-11-27 22:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='County',
            fields=[
                ('county_id', models.AutoField(primary_key=True, serialize=False)),
                ('county_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('district_aun', models.IntegerField(primary_key=True, serialize=False)),
                ('district_name', models.CharField(max_length=100)),
                ('county_id', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='proj_display.county')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_id', models.IntegerField(primary_key=True, serialize=False)),
                ('school_name', models.CharField(max_length=100)),
                ('district_aun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
        ),
        migrations.CreateModel(
            name='DistrictInfo',
            fields=[
                ('district', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='proj_display.district')),
                ('c_and_t_web', models.CharField(max_length=50)),
                ('c_and_t_enrollment', models.IntegerField()),
                ('c_and_t_name', models.CharField(max_length=100)),
                ('imu_name', models.CharField(max_length=100)),
                ('imu_website', models.CharField(max_length=50)),
                ('street_address', models.CharField(max_length=50)),
                ('city_address', models.CharField(max_length=25)),
                ('zip_code', models.IntegerField()),
                ('website', models.CharField(max_length=50)),
                ('phone_num', models.CharField(max_length=50)),
                ('grades_off', models.CharField(max_length=25)),
                ('num_schools', models.IntegerField()),
                ('geographic_size', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='SchoolInfo',
            fields=[
                ('school_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='proj_display.school')),
                ('street_address', models.CharField(max_length=50)),
                ('city_address', models.CharField(max_length=25)),
                ('zip_code', models.IntegerField()),
                ('website', models.CharField(max_length=50)),
                ('phone_num', models.CharField(max_length=25)),
                ('grades_offered', models.CharField(max_length=25)),
                ('title_1', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='BasicEduFunding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('final_bef', models.FloatField()),
                ('base_bef', models.FloatField()),
                ('student_weighted_distribution', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Basic Education Funding',
                'verbose_name_plural': 'Basic Education Funding',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='AidRatio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('market_value', models.FloatField()),
                ('personal_income', models.FloatField()),
                ('wadm', models.FloatField()),
                ('mv_per_wadm', models.FloatField()),
                ('market_value_aid_ratio', models.FloatField()),
                ('pi_per_wadm', models.FloatField()),
                ('personal_income_aid_ratio', models.FloatField()),
                ('market_value_personal_income_aid_ratio', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Aid Ratio',
                'verbose_name_plural': 'Aid Ratios',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='AdmGrades',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('adm_pre_kindergarten_ht', models.FloatField()),
                ('adm_pre_kindergarten_ft', models.FloatField()),
                ('adm_kindergarten_ht4', models.FloatField()),
                ('adm_kindergarten_ft4', models.FloatField()),
                ('adm_kindergarten_ht5', models.FloatField()),
                ('adm_kindergarten_ft5', models.FloatField()),
                ('adm_elementary', models.FloatField()),
                ('adm_secondary', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'ADM by Grades',
                'verbose_name_plural': 'ADM by Grades',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='AdmGeneral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('adm', models.FloatField()),
                ('wadm', models.FloatField()),
                ('adjusted_adm', models.FloatField()),
                ('adm_pde_363', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'ADM General',
                'verbose_name_plural': 'ADM General',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='DistrictDemographic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('per_african_american', models.FloatField()),
                ('per_am_indian_or_alaskan_native', models.FloatField()),
                ('per_pacific_islander', models.FloatField()),
                ('per_two_or_more_races', models.FloatField()),
                ('per_white', models.FloatField()),
                ('per_hispanic', models.FloatField()),
                ('per_asian', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='DistrictFiscalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('average_daily_membership', models.FloatField()),
                ('based_on_instruction', models.FloatField()),
                ('based_on_total', models.FloatField()),
                ('facilities_acquisition_and_construction', models.FloatField()),
                ('federal_revenue', models.FloatField()),
                ('general_fund_balance', models.FloatField()),
                ('local_revenue', models.FloatField()),
                ('mv_pi_aid_ratio', models.FloatField()),
                ('instruction', models.FloatField()),
                ('state_revenue', models.FloatField()),
                ('non_instructional', models.FloatField()),
                ('other_revenue', models.FloatField()),
                ('other_financing_uses', models.FloatField()),
                ('supporting_services', models.FloatField()),
                ('total_expenditures', models.FloatField()),
                ('total_revenues', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'District Fiscal Data',
                'verbose_name_plural': 'District Fiscal Data',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ExpendituresGeneral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('current_expenditures', models.FloatField()),
                ('other_expenditures', models.FloatField()),
                ('actual_instruction_summer', models.FloatField()),
                ('instructional_staff', models.FloatField()),
                ('administration', models.FloatField()),
                ('pupil_health', models.FloatField()),
                ('business', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Expenditures General',
                'verbose_name_plural': 'Expenditures General',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ExpendituresPerAdm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('adm', models.FloatField()),
                ('weighted_adm', models.FloatField()),
                ('instruction_per_adm', models.FloatField()),
                ('support_services_per_adm', models.FloatField()),
                ('non_instructional_per_adm', models.FloatField()),
                ('current_exp_per_adm', models.FloatField()),
                ('facilities_construction_per_adm', models.FloatField()),
                ('other_financing_uses_per_adm', models.FloatField()),
                ('total_exp_per_adm', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Expenditures Per ADM',
                'verbose_name_plural': 'Expenditures Per ADM',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ExpendituresPrograms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('regular_programs', models.FloatField()),
                ('special_programs', models.FloatField()),
                ('vocational_programs', models.FloatField()),
                ('other_institutional_programs', models.FloatField()),
                ('non_public_programs', models.FloatField()),
                ('adult_education_programs', models.FloatField()),
                ('higher_education_programs', models.FloatField()),
                ('higher_ed_programs_secondary', models.FloatField()),
                ('pre_kindergarten', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Expenditures Programs',
                'verbose_name_plural': 'Expenditures Programs',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ExpendituresServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('instruction', models.FloatField()),
                ('support_services', models.FloatField()),
                ('noninstructional_services', models.FloatField()),
                ('improvement_services', models.FloatField()),
                ('support_services_students', models.FloatField()),
                ('operation_of_plant_services', models.FloatField()),
                ('students_transportation_services', models.FloatField()),
                ('central', models.FloatField()),
                ('other_support_services', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Expenditures Services',
                'verbose_name_plural': 'Expenditures Services',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ExtraDemoDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('per_military_connected', models.FloatField()),
                ('per_gifted_student', models.FloatField()),
                ('per_special_education', models.FloatField()),
                ('per_english_learner', models.FloatField()),
                ('per_foster_care', models.FloatField()),
                ('per_homeless', models.FloatField()),
                ('per_economically_disadvantaged', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='GenderDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('male', models.FloatField()),
                ('female', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='GradRateByCategoryDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('x_year_cohort', models.IntegerField()),
                ('cohort_grad_rate', models.FloatField()),
                ('male_grad_rate', models.FloatField()),
                ('female_grad_rate', models.FloatField()),
                ('special_ed_grad_rate', models.FloatField()),
                ('el_grad_rate', models.FloatField()),
                ('econ_disadvantaged_grad_rate', models.FloatField()),
                ('migrant_grad_rate', models.FloatField()),
                ('foster_grad_rate', models.FloatField()),
                ('homeless_grad_rate', models.FloatField()),
                ('military_grad_rate', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Grad Rate by Category District',
                'verbose_name_plural': 'Grad Rate by Category District',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='GradRateByRaceDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('x_year_cohort', models.IntegerField()),
                ('aian_grad_rate', models.FloatField()),
                ('native_hawaiin_pacific_islander_grad_rate', models.FloatField()),
                ('asian_grad_rate', models.FloatField()),
                ('black_grad_rate', models.FloatField()),
                ('hispanic_grad_rate', models.FloatField()),
                ('white_grad_rate', models.FloatField()),
                ('multi_racial_grad_rate', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Grad Rate by Race District',
                'verbose_name_plural': 'Grad Rate by Race District',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='LowIncomePercentDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('total_enrollment', models.IntegerField()),
                ('low_income_enrollment', models.IntegerField()),
                ('percent_of_enrollment_from_low_income_families', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Low Income Percent for District',
                'verbose_name_plural': 'Low Income Percent for Districts',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='Misc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('mv_pi_aid_ratio', models.FloatField()),
                ('adm', models.FloatField()),
                ('wadm', models.FloatField()),
                ('eq_mills', models.FloatField()),
                ('pop_per_sq_mile', models.FloatField()),
                ('aie_per_wadm', models.FloatField()),
                ('total_exp_per_adm', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Miscellaneous Data',
                'verbose_name_plural': 'Miscellaneous Data',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='MiscRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('mv_pi_rk', models.IntegerField()),
                ('wadm_rk', models.IntegerField()),
                ('eq_mills_rk', models.IntegerField()),
                ('pop_per_sq_mile_rk', models.IntegerField()),
                ('aie_per_wadm_rk', models.IntegerField()),
                ('total_exp_per_adm_rk', models.IntegerField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Misc Rank',
                'verbose_name_plural': 'Misc Rank',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PersonalIncome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('records', models.IntegerField()),
                ('compensation', models.FloatField()),
                ('net_profits', models.FloatField()),
                ('dividends_and_interest', models.FloatField()),
                ('misc_income', models.FloatField()),
                ('out_of_st_tax_records', models.IntegerField()),
                ('out_of_st_tax_credit', models.FloatField()),
                ('out_of_st_income', models.FloatField()),
                ('total_personal_income', models.FloatField()),
                ('adjusted_personal_income', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Personal Income',
                'verbose_name_plural': 'Personal Income',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PublicSchoolDropoutsDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('oct_1_enrollment_grades_7_12', models.IntegerField()),
                ('male_dropouts', models.IntegerField()),
                ('female_dropouts', models.IntegerField()),
                ('dropouts', models.IntegerField()),
                ('dropout_rate', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Public School Dropouts District',
                'verbose_name_plural': 'Public School Dropouts District',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PublicSchoolEnrollmentDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('pka', models.IntegerField()),
                ('pkp', models.IntegerField()),
                ('pkf', models.IntegerField()),
                ('k4a', models.IntegerField()),
                ('k4p', models.IntegerField()),
                ('k4f', models.IntegerField()),
                ('k5a', models.IntegerField()),
                ('k5p', models.IntegerField()),
                ('k5f', models.IntegerField()),
                ('grade_1', models.IntegerField()),
                ('grade_2', models.IntegerField()),
                ('grade_3', models.IntegerField()),
                ('grade_4', models.IntegerField()),
                ('grade_5', models.IntegerField()),
                ('grade_6', models.IntegerField()),
                ('grade_7', models.IntegerField()),
                ('grade_8', models.IntegerField()),
                ('grade_9', models.IntegerField()),
                ('grade_10', models.IntegerField()),
                ('grade_11', models.IntegerField()),
                ('grade_12', models.IntegerField()),
                ('total', models.IntegerField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Public School Enrollment (District)',
                'verbose_name_plural': 'Public School Enrollments (District)',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PublicSchoolGradRatesDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('total_graduates', models.IntegerField()),
                ('total_college_bound', models.IntegerField()),
                ('total_college_bound_percentage', models.FloatField()),
                ('two_four_year_college_university', models.IntegerField()),
                ('two_four_year_college_university_percentage', models.FloatField()),
                ('total_postsecondary_bound', models.IntegerField()),
                ('total_postsecondary_bound_percentage', models.FloatField()),
                ('non_degree_getting_postsecondary_school', models.IntegerField()),
                ('non_degree_getting_postsecondary_school_percentage', models.FloatField()),
                ('specialized_associate_degree_getting_institution', models.IntegerField()),
                ('specialized_associate_degree_getting_institution_percentage', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Public School Grad Rates District',
                'verbose_name_plural': 'Public School Grad Rates District',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='RealEstateTax',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('municipality_and_other', models.CharField(max_length=100)),
                ('real_estate_mills', models.FloatField()),
                ('additional_community_college_mills', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Real Estate Tax',
                'verbose_name_plural': 'Real Estate Taxes',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='RevenuesBySource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('total_revenue', models.FloatField()),
                ('local_taxes', models.FloatField()),
                ('local_other', models.FloatField()),
                ('total_local_revenue', models.FloatField()),
                ('local_per_of_total_revenue', models.FloatField()),
                ('total_state_revenue', models.FloatField()),
                ('state_per_of_total_revenue', models.FloatField()),
                ('revenue_from_federal_sources', models.FloatField()),
                ('federal_per_of_total_revenue', models.FloatField()),
                ('total_other_revenue', models.FloatField()),
                ('other_per_of_total_revenue', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Revenues by Source',
                'verbose_name_plural': 'Revenues by Source',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='RevenuesPerAdm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('adm', models.FloatField()),
                ('total_revenue_per_adm', models.FloatField()),
                ('total_rank_total', models.IntegerField()),
                ('local_revenue_per_adm', models.FloatField()),
                ('total_rank_local', models.IntegerField()),
                ('state_revenue_per_adm', models.FloatField()),
                ('total_rank_state', models.IntegerField()),
                ('federal_revenue_per_adm', models.FloatField()),
                ('total_rank_federal', models.IntegerField()),
                ('other_revenue_per_adm', models.FloatField()),
                ('total_rank_other', models.IntegerField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Revenues per ADM',
                'verbose_name_plural': 'Revenues per ADM',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='RevenuesTaxesColl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('total_taxes_collected', models.FloatField()),
                ('real_estate_taxes_collected', models.FloatField()),
                ('public_utility_realty_taxes_collected', models.FloatField()),
                ('payment_in_lieu_taxes_collected', models.FloatField()),
                ('per_capita_taxes_collected', models.FloatField()),
                ('first_class_sd_taxes_collected', models.FloatField()),
                ('delinquent_taxes_collected', models.FloatField()),
                ('steb_market_value', models.FloatField()),
                ('equalized_mills', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Revenues Taxes Collection',
                'verbose_name_plural': 'Revenues Taxes Collection',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PublicSchoolGradRatesSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('total_graduates', models.IntegerField()),
                ('total_college_bound', models.IntegerField()),
                ('total_college_bound_percentage', models.FloatField()),
                ('two_four_year_college_university', models.IntegerField()),
                ('two_four_year_college_university_percentage', models.FloatField()),
                ('total_postsecondary_bound', models.IntegerField()),
                ('total_postsecondary_bound_percentage', models.FloatField()),
                ('non_degree_getting_postsecondary_school', models.IntegerField()),
                ('non_degree_getting_postsecondary_school_percentage', models.FloatField()),
                ('specialized_associate_degree_getting_institution', models.IntegerField()),
                ('specialized_associate_degree_getting_institution_percentage', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Public School Grad Rates School',
                'verbose_name_plural': 'Public School Grad Rates School',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PublicSchoolEnrollmentSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('pka', models.IntegerField()),
                ('pkp', models.IntegerField()),
                ('pkf', models.IntegerField()),
                ('k4a', models.IntegerField()),
                ('k4p', models.IntegerField()),
                ('k4f', models.IntegerField()),
                ('k5a', models.IntegerField()),
                ('k5p', models.IntegerField()),
                ('k5f', models.IntegerField()),
                ('grade_1', models.IntegerField()),
                ('grade_2', models.IntegerField()),
                ('grade_3', models.IntegerField()),
                ('grade_4', models.IntegerField()),
                ('grade_5', models.IntegerField()),
                ('grade_6', models.IntegerField()),
                ('grade_7', models.IntegerField()),
                ('grade_8', models.IntegerField()),
                ('grade_9', models.IntegerField()),
                ('grade_10', models.IntegerField()),
                ('grade_11', models.IntegerField()),
                ('grade_12', models.IntegerField()),
                ('total', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Public School Enrollment (School)',
                'verbose_name_plural': 'Public School Enrollments (School)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PublicSchoolDropoutsSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('oct_1_enrollment_grades_7_12', models.IntegerField()),
                ('male_dropouts', models.IntegerField()),
                ('female_dropouts', models.IntegerField()),
                ('dropouts', models.IntegerField()),
                ('dropout_rate', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Public School Dropouts School',
                'verbose_name_plural': 'Public School Dropouts School',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PssaSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('pssa_subject', models.CharField(max_length=100)),
                ('group_students', models.CharField(max_length=75)),
                ('grade', models.IntegerField()),
                ('number_scored', models.FloatField()),
                ('percent_advanced', models.FloatField()),
                ('percent_proficient', models.FloatField()),
                ('percent_basic', models.FloatField()),
                ('percent_below_basic', models.FloatField()),
                ('percent_proficient_and_above', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'PSSA School Data',
                'verbose_name_plural': 'PSSA School Data',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicTotal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('grand_total', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Total',
                'verbose_name_plural': 'Private Non-Public Totals',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicSecondaryEnrollmentPrivatePaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('grade_9', models.IntegerField()),
                ('grade_10', models.IntegerField()),
                ('grade_11', models.IntegerField()),
                ('grade_12', models.IntegerField()),
                ('secondary_ungraded', models.IntegerField()),
                ('non_resident', models.IntegerField()),
                ('resident', models.IntegerField()),
                ('total_secondary_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Secondary Enrollment (Private Paid)',
                'verbose_name_plural': 'Private Non-Public Secondary Enrollment (Private Paid)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicSecondaryEnrollmentFullyPublicPaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('grade_9', models.IntegerField()),
                ('grade_10', models.IntegerField()),
                ('grade_11', models.IntegerField()),
                ('grade_12', models.IntegerField()),
                ('secondary_ungraded', models.IntegerField()),
                ('non_resident', models.IntegerField()),
                ('resident', models.IntegerField()),
                ('total_secondary_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Secondary Enrollment (Fully Public Paid)',
                'verbose_name_plural': 'Private Non-Public Secondary Enrollment (Fully Public Paid)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicOtherEnrollmentPublicPaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('nursery', models.IntegerField()),
                ('special_ed_preschool_k5', models.IntegerField()),
                ('special_ed_preschool_nursery_age_3_4_5', models.IntegerField()),
                ('non_resident', models.IntegerField()),
                ('resident', models.IntegerField()),
                ('total_other_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Other Enrollment (Public Paid)',
                'verbose_name_plural': 'Private Non-Public Other Enrollment (Public Paid)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicOtherEnrollmentPrivatePaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('nursery', models.IntegerField()),
                ('special_ed_preschool_k5', models.IntegerField()),
                ('special_ed_preschool_nursery_age_3_4_5', models.IntegerField()),
                ('non_resident', models.IntegerField()),
                ('resident', models.IntegerField()),
                ('total_other_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Other Enrollment (Private Paid)',
                'verbose_name_plural': 'Private Non-Public Other Enrollment (Private Paid)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicLowIncomeEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('percent_nursery_low_income', models.FloatField()),
                ('percent_k12_low_income', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Low Income Enrollment',
                'verbose_name_plural': 'Private Non-Public Low Income Enrollment',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicFullTimeEquivalentTeachers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('nursery_fte', models.FloatField()),
                ('elementary_fte', models.FloatField()),
                ('secondary_fte', models.FloatField()),
                ('special_education_fte', models.FloatField()),
                ('total_fte', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Full-Time Equivalent Teachers',
                'verbose_name_plural': 'Private Non-Public Full-Time Equivalent Teachers',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicElemEnrollmentPrivatePaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('k4', models.IntegerField()),
                ('k5', models.IntegerField()),
                ('grade_1', models.IntegerField()),
                ('grade_2', models.IntegerField()),
                ('grade_3', models.IntegerField()),
                ('grade_4', models.IntegerField()),
                ('grade_5', models.IntegerField()),
                ('grade_6', models.IntegerField()),
                ('grade_7E', models.IntegerField()),
                ('grade_8E', models.IntegerField()),
                ('total_elementary_ungraded', models.IntegerField()),
                ('non_resident', models.IntegerField()),
                ('resident', models.IntegerField()),
                ('total_elementary_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Elementary Enrollment (Private Paid)',
                'verbose_name_plural': 'Private Non-Public Elementary Enrollment (Private Paid)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='PrivateNonPublicElemEnrollmentFullyPublicPaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('k4', models.IntegerField()),
                ('k5', models.IntegerField()),
                ('grade_1', models.IntegerField()),
                ('grade_2', models.IntegerField()),
                ('grade_3', models.IntegerField()),
                ('grade_4', models.IntegerField()),
                ('grade_5', models.IntegerField()),
                ('grade_6', models.IntegerField()),
                ('grade_7E', models.IntegerField()),
                ('grade_8E', models.IntegerField()),
                ('total_elementary_ungraded', models.IntegerField()),
                ('non_resident', models.IntegerField()),
                ('resident', models.IntegerField()),
                ('total_elementary_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Private Non-Public Elementary Enrollment (Fully Public Paid)',
                'verbose_name_plural': 'Private Non-Public Elementary Enrollment (Fully Public Paid)',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='LowIncomePercentPubSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('total_enrollment', models.IntegerField()),
                ('low_income_enrollment', models.IntegerField()),
                ('percent_enrollment_from_low_income_families', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Low Income Percent for Public Schools',
                'verbose_name_plural': 'Low Income Percent for Public Schools',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='LowIncomePercentPrivateSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('low_income_percentage', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Low Income Percent for Private Schools',
                'verbose_name_plural': 'Low Income Percent for Private Schools',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='KeystoneGradeSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('keystone_subject', models.CharField(max_length=25)),
                ('student_group', models.CharField(max_length=75)),
                ('grade', models.IntegerField()),
                ('number_scored', models.IntegerField()),
                ('percent_advanced', models.FloatField()),
                ('percent_proficient', models.FloatField()),
                ('percent_basic', models.FloatField()),
                ('percent_below_basic', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Keystone Grade School',
                'verbose_name_plural': 'Keystone Grade School',
                'unique_together': {('school', 'school_year','student_group','keystone_subject')},
            },
        ),
        migrations.CreateModel(
            name='GradRateByRaceSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('x_year_cohort', models.IntegerField()),
                ('aian_grad_rate', models.FloatField()),
                ('native_hawaiin_pacific_islander_grad_rate', models.FloatField()),
                ('asian_grad_rate', models.FloatField()),
                ('black_grad_rate', models.FloatField()),
                ('hispanic_grad_rate', models.FloatField()),
                ('white_grad_rate', models.FloatField()),
                ('multi_racial_grad_rate', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Grad Rate by Race School',
                'verbose_name_plural': 'Grad Rate by Race School',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='GradRateByCategorySchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('x_year_cohort', models.IntegerField()),
                ('cohort_grad_rate', models.FloatField()),
                ('male_grad_rate', models.FloatField()),
                ('female_grad_rate', models.FloatField()),
                ('special_ed_grad_rate', models.FloatField()),
                ('el_grad_rate', models.FloatField()),
                ('econ_disadvantaged_grad_rate', models.FloatField()),
                ('migrant_grad_rate', models.FloatField()),
                ('foster_grad_rate', models.FloatField()),
                ('homeless_grad_rate', models.FloatField()),
                ('military_grad_rate', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Grad Rate by Category School',
                'verbose_name_plural': 'Grad Rate by Category School',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='GenderSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('male', models.FloatField()),
                ('female', models.FloatField()),
                ('school_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'unique_together': {('school_id', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ExtraDemoSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('per_english_learner', models.FloatField()),
                ('per_special_education', models.FloatField()),
                ('per_gifted_student', models.FloatField()),
                ('per_military_connected', models.FloatField()),
                ('per_foster_care', models.FloatField()),
                ('per_economically_disadvantaged', models.FloatField()),
                ('per_homeless', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ApSatAct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('sat_act_college_ready_benchmark', models.FloatField()),
                ('num_grade_12_meeting_benchmarks', models.IntegerField()),
                ('number_grade_12_with_22_higher_act', models.IntegerField()),
                ('number_grade_12_with_3_higher_ap_4_higher_ib', models.IntegerField()),
                ('number_grade_12_taking_plan', models.IntegerField()),
                ('number_grade_12_taking_psat', models.IntegerField()),
                ('psat_plan_participation', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'AP SAT ACT',
                'verbose_name_plural': 'AP SAT ACT',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ApPssaKeystone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('ela_meeting_annual_academic_growth_expectations', models.FloatField()),
                ('ela_percent_proficient_or_advanced_pssa', models.FloatField()),
                ('math_meeting_annual_academic_growth_expectations', models.FloatField()),
                ('math_percent_proficient_or_advanced_keystone', models.FloatField()),
                ('science_bio_meeting_annual_academic_growth_exp', models.FloatField()),
                ('science_bio_percent_proficient_advanced_pssa_keystone', models.FloatField()),
                ('percent_pssa_keystone_advanced_ela_lit', models.FloatField()),
                ('percent_pssa_keystone_advanced_math_alg', models.FloatField()),
                ('percent_pssa_keystone_advanced_scnice_bio', models.FloatField()),
                ('grade_3_percent_proficient_advanced', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'AP PSSA Keystone',
                'verbose_name_plural': 'AP PSSA Keystone',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ApPercentGapMetHus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('math_percent_required_gap_closure_met_hus', models.FloatField()),
                ('ela_lit_percent_required_gap_closure_met_hus', models.FloatField()),
                ('science_bio_percent_required_gap_closure_met_hus', models.FloatField()),
                ('ela_percent_required_gap_closure_met_hus', models.FloatField()),
                ('bio_percent_required_gap_closure_met_hus', models.FloatField()),
                ('algebra_percent_required_gap_closure_met_hus', models.FloatField()),
                ('science_percent_required_gap_closure_met_hus', models.FloatField()),
                ('math_alg_percent_required_gap_closure_met_hus', models.FloatField()),
                ('lit_percent_required_gap_closure_met_hus', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'AP Percent Gap Met HUS',
                'verbose_name_plural': 'AP Percent Gap Met HUS',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ApPercentGapMetAll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('math_percent_required_gap_closure_met_all', models.FloatField()),
                ('ela_lit_percent_required_gap_closure_met_all', models.FloatField()),
                ('science_bio_percent_required_gap_closure_met_all', models.FloatField()),
                ('ela_percent_required_gap_closure_met_all', models.FloatField()),
                ('bio_percent_required_gap_closure_met_all', models.FloatField()),
                ('algebra_percent_required_gap_closure_met_all', models.FloatField()),
                ('science_percent_required_gap_closure_met_all', models.FloatField()),
                ('math_alg_percent_required_gap_closure_met_all', models.FloatField()),
                ('lit_percent_required_gap_closure_met_all', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'AP Percent Gap Met All',
                'verbose_name_plural': 'AP Percent Gap Met All',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='ApGeneral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('promotion_rate_all_students', models.FloatField()),
                ('ap_ib_college_credit', models.FloatField()),
                ('attendance_rate', models.FloatField()),
                ('calculated_score', models.FloatField()),
                ('cohort_grad_rate', models.FloatField()),
                ('industry_standards_based_competency_assessments_percent', models.FloatField()),
                ('percent_industry_standards_based_competency_assessments_advanced', models.FloatField()),
                ('final_academic_score', models.FloatField()),
                ('percent_3_higher_ap_4_higher_ib', models.FloatField()),
                ('grade_12_enrollment', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'AP General',
                'verbose_name_plural': 'AP General',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='SchoolDemographic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('per_asian', models.FloatField()),
                ('per_hispanic', models.FloatField()),
                ('per_pacific_islander', models.FloatField()),
                ('per_am_indian_or_alaskan_native', models.FloatField()),
                ('per_african_american', models.FloatField()),
                ('per_white', models.FloatField()),
                ('per_two_or_more_races', models.FloatField()),
                ('school_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'unique_together': {('school_id', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='SchoolFiscalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('state_personnel', models.FloatField()),
                ('state_non_personnel', models.FloatField()),
                ('local_personnel', models.FloatField()),
                ('local_non_personnel', models.FloatField()),
                ('federal_personnel', models.FloatField()),
                ('federal_non_personnel', models.FloatField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'School Fiscal Data',
                'verbose_name_plural': 'School Fiscal Data',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='SecCareerTechnicalFund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('final_sctes', models.FloatField()),
                ('aie_per_wadm', models.FloatField()),
                ('ber', models.FloatField()),
                ('vocational_adm', models.FloatField()),
                ('voc_adm_multiplier', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Secondary Career Technical Fund',
                'verbose_name_plural': 'Secondary Career Technical Fund',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='SpecialEduFunding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('final_sef', models.FloatField()),
                ('base_sef', models.FloatField()),
                ('student_based_allocation', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Special Education Funding',
                'verbose_name_plural': 'Special Education Funding',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='TotalGradsDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('x_year_cohort', models.IntegerField()),
                ('grads', models.IntegerField()),
                ('cohort', models.IntegerField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'Total Grads District',
                'verbose_name_plural': 'Total Grads District',
                'unique_together': {('district', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='TotalGradsSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('x_year_cohort', models.IntegerField()),
                ('grads', models.IntegerField()),
                ('cohort', models.IntegerField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.school')),
            ],
            options={
                'verbose_name': 'Total Grads School',
                'verbose_name_plural': 'Total Grads School',
                'unique_together': {('school', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='WadmGrades',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('wadm_pre_kindergarten_ht', models.FloatField()),
                ('wadm_pre_kindergarten_ft', models.FloatField()),
                ('wadm_kindergarten_ht4', models.FloatField()),
                ('wadm_kindergarten_ft4', models.FloatField()),
                ('wadm_kindergarten_ht5', models.FloatField()),
                ('wadm_kindergarten_ft5', models.FloatField()),
                ('wadm_elementary', models.FloatField()),
                ('wadm_secondary', models.FloatField()),
                ('adjustment_factor', models.FloatField()),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proj_display.district')),
            ],
            options={
                'verbose_name': 'WADM by Grades',
                'verbose_name_plural': 'WADM by Grades',
                'unique_together': {('district', 'school_year')},
            },
        ),
    ]
